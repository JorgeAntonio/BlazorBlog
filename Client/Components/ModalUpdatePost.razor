<div class="modal fade show d-block bg-half-block" id="staticBackdrop" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Update Post</h5>
                <button @onclick="()=>OnClickButtonClose.InvokeAsync(PostToUpdate)" type="button" class="btn-close" aria-label="Close"></button>
            </div>

            @if (PostToUpdate != null)
            {
                <EditForm Model="PostToUpdate" OnValidSubmit="UpdatePostAsync">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <InputText @bind-Value="PostToUpdate.Title" class="form-control" id="title" />
                        </div>
                        <div class="mb-3">
                            <label for="content" class="form-label">Content</label>
                            <InputTextArea @bind-Value="PostToUpdate.Content" class="form-control" id="content" />
                        </div>

                        <DataAnnotationsValidator />
                        <ValidationSummary />
                    </div>
                    <div class="modal-footer">
                        <button @onclick="()=>OnClickButtonClose.InvokeAsync(PostToUpdate)" type="button" class="btn btn-secondary">Close</button>
                        <button type="submit" class="btn btn-success">Update</button>
                    </div>
                </EditForm>
            }
            else
            {
                <h3>Loading...</h3>
            }

        </div>
    </div>
</div>
@code {
    [Parameter]
    public EventCallback<Post?> OnClickButtonClose { get; set; }

    [Parameter]
    public Post? PostToUpdate { get; set; } = null;

#pragma warning disable CS8618
    [Inject]
    protected HttpClient HttpClient { get; set; }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }
#pragma warning restore CS8618


    private async Task UpdatePostAsync()
    {
        Console.WriteLine($"UpdatePostAsync | title: {PostToUpdate.Title} | Content: {PostToUpdate.Content}");

        HttpResponseMessage response = await HttpClient.PutAsJsonAsync<Post>(APIEndpoints.PostsUpdate(PostToUpdate.PostId), PostToUpdate);

        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Post update sucessfully.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Post update failed.");
        }
    }
}
